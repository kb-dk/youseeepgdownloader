#!/usr/bin/env python

import os
import sys
import datetime
import hashlib
import json

import sh
from sh import date
from sh import wget
from sh import xmllint

from stateinformer import StateInformer


# defines

epgComponent = "yousee-epg-fetcher"
epgAgeCheck = "yousee-epg-age-check"
epgDownload = "yousee-epg-downloader"
epgSize = "yousee-epg-file-check"
epgMd5 = "yousee-epg-md5-check"
epgWriter = "yousee-epg-filewriter"
epgXml = "yousee-epg-xml-validator"


def getConfig(confPath):
    """Load file from confPath, and parse as json.
    Return the values we're interested in.
    """
    config = json.load(open(confPath))

    for key in ["DataDir", "LogFile", "StateMonitor", "EpgAgeLimit"]:
        if not config.has_key(key):
            print "Bad configuration: Missing \"%s\"." % key
            sys.exit(1)

    ageLimitHours = int(config["EpgAgeLimit"])
    ageLimitDelta = datetime.timedelta(hours=ageLimitHours)

    return config["DataDir"], config["LogFile"], config["StateMonitor"], ageLimitDelta


class YouseeEpgDownloader():
    def __init__(self, filename, filepath, epgAgeLimit, informer):
        self.filename = filename
        self.filepath = filepath
        self.epgAgeLimit = epgAgeLimit
        self.informer = informer


    def fetchEpg(self):
        """Use wget to fetch EPG data into memory"""
        try:
            wgetProc = wget("http://194.239.141.37/statsbiblioteket/epg.xml", "-nv", a="/home/adam/data/yousee-epg/wget.log", O="-", user="statsbib", password="yptks")
        except sh.ErrorReturnCode:
            return None
        else:
            return wgetProc.stdout


    def fileSizeOK(self, data):
        """Check whether the size of data is of a expected size."""
        return 1000000 < len(data) < 10000000


    def validXmlFile(self, path):
        """Use xmllint to check the file for well-formed ness."""
        try:
            xmllint("--noout", path)
        except sh.ErrorReturnCode_1:
            return False
        else:
            return True


    def timeOfLastModification(self, path):
        """Get hours since the last modification of path."""
        if not os.path.exists(path):
            return None

        modTime = os.path.getmtime(path)
        return datetime.datetime.fromtimestamp(modTime)


    def getMd5sum(self, data):
        """Calculate a md5sum for data."""
        m = hashlib.md5()
        m.update(data)
        return m.hexdigest()


    def getLatestEpgFilePath(self):
        """Get the newest EPG file stored in the data directory."""
        files = sorted(os.listdir(basedir))
        if len(files) is 0:
            return None
        else:
            return basedir + "/" + files[-1]


    def getLatestMd5Sum(self):
        """Calculate the md5sum for the latest EPG file."""
        latestEpg = self.getLatestEpgFilePath()
        if latestEpg is None:
            return None
        else:
            f = open(latestEpg)
            return self.getMd5sum(f.read())


    def getAgeOfLatestEpgFile(self):
        """Calculate the age of the latest EPG file."""
        latestEpg = self.getLatestEpgFilePath()
        if latestEpg is None:
            return None
        else:
            return datetime.datetime.today() - self.timeOfLastModification(latestEpg)


    def saveNewEpgData(self, data, path):
        """Decide whether or not to saved the downloaded EPG data.
         If the md5sum is the same as the previous, the new data is thrown away,
         otherwise it is saved.
         """
        old_md5sum = self.getLatestMd5Sum()
        new_md5sum = self.getMd5sum(data)

        if old_md5sum is None and new_md5sum is None:
            return None
        elif old_md5sum != new_md5sum:
            if not os.path.exists(path):
                f = open(path, "w")
                f.write(data)
                f.close()
                return path
            else:
                return False
        else:
            return False


    def convertByteToMB(self, numberOfByte):
        """Hack to convert a number of bytes into the MB-range."""
        return round(float(numberOfByte)/1024/1024, 1)


    def run(self):
        errors = 0
        msgs = []


        epgAgeCheckComponent = informer.get(epgAgeCheck)
        epgAgeCheckComponent.started()

        ageOfLatestEpgFile = self.getAgeOfLatestEpgFile()
        epgTooOld =  (ageOfLatestEpgFile is not None) and (ageOfLatestEpgFile > epgAgeLimit)

        if epgTooOld:
            msgs.append("EPG haven't been updated in %i hours." % ageOfLatestEpgFile)
            errors += 1
            epgWriterComponent.failed(msg)
            return msgs, errors

        epgAgeCheckComponent.completed()


        epgDownloadComponent = informer.get(epgDownload)
        epgDownloadComponent.started()
        newEpgData = self.fetchEpg()

        if not newEpgData:
            msg = "Failed to fetch EPG data."
            msgs.append(msg)
            epgDownloadComponent.failed(msg)
            errors += 1
            return msgs, errors
        else:
            msg = "Fetched EPG data."
            msgs.append(msg)
            epgDownloadComponent.completed(msg)


        epgSizeComponent = informer.get(epgSize)
        epgSizeComponent.started()
        prettyFileSize = self.convertByteToMB(len(newEpgData))

        if not self.fileSizeOK(newEpgData):
            msg = "EPG data seems to have an unexpected size. Expected ~6.5MB, was %sMB." % prettyFileSize
            msgs.append(msg)
            epgSizeComponent.failed(msg)
            errors += 1
        else:
            msg = "Filesize OK: %sMB" % prettyFileSize
            msgs.append(msg)
            epgSizeComponent.completed(msg)


        epgMd5Component = informer.get(epgMd5)
        epgMd5Component.started()
        md5sum = self.getMd5sum(newEpgData)

        if md5sum is None:
            msg = "Failed to get md5sum for downloaded data."
            msgs.append(msg)
            epgMd5Component.failed(msg)
            errors += 1
            return msgs, errors
        else:
            msg = "md5sum: " + md5sum
            msgs.append(msg)
            epgMd5Component.completed(msg)


        epgWriterComponent = informer.get(epgWriter)
        epgWriterComponent.started()
        path = self.saveNewEpgData(newEpgData, filepath)

        if path is None:
            msg = "Something unexpected happened while deciding whether or not to keep the new file."
            msgs.append(msg)
            epgWriterComponent.failed(msg)
            errors += 1
            return msgs, errors
        elif path is False:
            if epgTooOld:
                msgs.append("EPG haven't been updated in %i hours." % ageOfLatestEpgFile)
                errors += 1
                epgWriterComponent.failed(msg)
                return msgs, errors
            else:
                msg = "Unchanged EPG data, didn't save."
                msgs.append(msg)
                epgWriterComponent.completed(msg)
                return msgs, errors
        else:
            msg = "Saved EPG data to file: " + path
            msgs.append(msg)
            epgWriterComponent.completed(msg)


        epgXmlComponent = informer.get(epgXml)
        epgXmlComponent.started()
        validXml = self.validXmlFile(path)

        if not validXml:
            msg = "Malformed EPG data (invalid XML)."
            msgs.append(msg)
            epgXmlComponent.failed(msg)
            errors += 1
        else:
            msg = "Well-formed EPG data (valid XML)."
            msgs.append(msg)
            epgXmlComponent.completed(msg)

        return msgs, errors


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print "Usage: %s config-file" % sys.argv[0]
        sys.exit(1)
    else:
        configFile = sys.argv[1]

    try:
        (basedir, logFile, stateMonitorAddress, epgAgeLimit) = getConfig(configFile)
        timestamp = date("--iso-8601=seconds").stdout.strip()
        filename = "yousee-epg_%s.xml" % timestamp
        filepath = basedir + "/" + filename
        informer = StateInformer(filename, stateMonitorAddress)
    except ValueError as e:
        print "Error loading the config file: " + configFile
        print e
    else:
        epgComponent_ = informer.get(epgComponent)
        try:
            downloader = YouseeEpgDownloader(filename, filepath, epgAgeLimit, informer)
            epgComponent_.started()
            (messages, errors) = downloader.run()
        except Exception as e:
            epgComponent_.failed(e.message)
            print e
        else:
            epgComponent_.done()
            numberOfMsgs = len(messages)

            if True or (errors > 0): # log this and remove if True
                errorReport = "\r\n".join(messages)
                print errorReport
