#!/usr/bin/env python

import os
import sys
import datetime
import hashlib
import json
import logging
from epgconfig import EpgConfig

import sh
from sh import date
from sh import wget
from sh import xmllint

from stateinformer import StateInformer


# defines

epgComponent = "yousee-epg-fetcher"
epgAgeCheck = "yousee-epg-age-check"
epgDownload = "yousee-epg-downloader"
epgSize = "yousee-epg-file-check"
epgMd5 = "yousee-epg-md5-check"
epgWriter = "yousee-epg-filewriter"
epgXml = "yousee-epg-xml-validator"


def createFilename(delta=0):
    timestamp = date("--iso-8601=seconds", date="%s seconds" % delta).stdout.strip()
    return "yousee-epg_%s.xml" % timestamp


class YouseeEpgDownloader():
    def __init__(self, config, filename, filepath, informer):
        self.config = config
        self.filename = filename
        self.filepath = filepath
        self.informer = informer


    def fetchEpg(self):
        """Use wget to fetch EPG data into memory"""
        try:
            wgetProc = wget(self.config.epgUrl, "-nv", a=self.config.logFile, O="-", user=self.config.username, password=self.config.password)
        except sh.ErrorReturnCode:
            return None
        else:
            return wgetProc.stdout


    def fileSizeOK(self, data):
        """Check whether the size of data is of a expected size."""
        return self.config.epgMinSize < len(data) < self.config.epgMaxSize


    def validXmlFile(self, path):
        """Use xmllint to check the file for well-formed ness."""
        try:
            xmllint("--noout", path)
        except sh.ErrorReturnCode_1:
            return False
        else:
            return True


    def timeOfLastModification(self, path):
        """Get hours since the last modification of path."""
        if not os.path.exists(path):
            return None

        modTime = os.path.getmtime(path)
        return datetime.datetime.fromtimestamp(modTime)


    def getMd5sum(self, data):
        """Calculate a md5sum for data."""
        m = hashlib.md5()
        m.update(data)
        return m.hexdigest()


    def getLatestEpgFilePath(self):
        """Get the newest EPG file stored in the data directory."""
        files = sorted(os.listdir(self.config.dataDir))
        if len(files) is 0:
            return None
        else:
            return self.config.dataDir + "/" + files[-1]


    def getLatestMd5Sum(self):
        """Calculate the md5sum for the latest EPG file."""
        latestEpg = self.getLatestEpgFilePath()
        if latestEpg is None:
            return None
        else:
            f = open(latestEpg)
            return self.getMd5sum(f.read())


    def getAgeOfLatestEpgFile(self):
        """Calculate the age of the latest EPG file."""
        latestEpg = self.getLatestEpgFilePath()
        if latestEpg is None:
            return None
        else:
            return datetime.datetime.today() - self.timeOfLastModification(latestEpg)

    def getMTimeOfLatestEpgFile(self):
        """Calculate the age of the latest EPG file."""
        latestEpg = self.getLatestEpgFilePath()
        if latestEpg is None:
            return None
        else:
            return self.timeOfLastModification(latestEpg)


    def saveNewEpgData(self, data, path):
        """Decide whether or not to saved the downloaded EPG data.
         If the md5sum is the same as the previous, the new data is thrown away,
         otherwise it is saved.
         """
        old_md5sum = self.getLatestMd5Sum()
        new_md5sum = self.getMd5sum(data)

        if old_md5sum is None and new_md5sum is None:
            return None
        elif old_md5sum != new_md5sum:
            if not os.path.exists(path):
                f = open(path, "w")
                f.write(data)
                f.close()
                return path
            else:
                return False
        else:
            return False


    def convertByteToMB(self, numberOfByte):
        """Hack to convert a number of bytes into the MB-range."""
        return round(float(numberOfByte)/1024/1024, 1)


    def run(self):
        errors = 0
        msgs = []


        epgAgeCheckComponent = informer.get(epgAgeCheck)
        epgAgeCheckComponent.started()
        lastEpgModification = self.getMTimeOfLatestEpgFile()

        if lastEpgModification is not None:
            ageOfLatestEpgFile = (datetime.datetime.today() - lastEpgModification)
            epgTooOld = ageOfLatestEpgFile > self.config.epgAgeLimit
        else:
            ageOfLatestEpgFile = None
            epgTooOld = False

        if epgTooOld:
            msg = "EPG haven't been updated in " + str(ageOfLatestEpgFile)
            logging.error(msg)
            msgs.append(msg)

            def missingEpgs():
                now = datetime.datetime.today()
                t = self.config.epgAgeLimit

                #while lastEpgModification + t < now:

                while now - t > lastEpgModification:
                    yield t.total_seconds()
                    t += self.config.epgAgeLimit

            for epg in missingEpgs():
                filename_ = createFilename(-epg)
                informer_ = StateInformer(filename_, self.config.stateMonitor)
                epgComponent_ = informer_.get(epgComponent)
                epgComponent_.failed()
                msg = "Missing EPG: " + filename_
                logging.error(msg)


        epgAgeCheckComponent.completed()


        epgDownloadComponent = informer.get(epgDownload)
        epgDownloadComponent.started()
        newEpgData = self.fetchEpg()

        if not newEpgData:
            msg = "Failed to fetch EPG data."
            logging.error(msg)
            msgs.append(msg)
            epgDownloadComponent.failed(msg)
            errors += 1
            return msgs, errors
        else:
            msg = "Fetched EPG data."
            logging.info(msg)
            msgs.append(msg)
            epgDownloadComponent.completed(msg)


        epgSizeComponent = informer.get(epgSize)
        epgSizeComponent.started()
        prettyFileSize = self.convertByteToMB(len(newEpgData))

        if not self.fileSizeOK(newEpgData):
            msg = "EPG data seems to have an unexpected size. Expected ~6.5MB, was %sMB." % prettyFileSize
            logging.error(msg)
            msgs.append(msg)
            epgSizeComponent.failed(msg)
            errors += 1
            return msgs, errors
        else:
            msg = "Filesize OK: %sMB" % prettyFileSize
            logging.info(msg)
            msgs.append(msg)
            epgSizeComponent.completed(msg)


        epgMd5Component = informer.get(epgMd5)
        epgMd5Component.started()
        md5sum = self.getMd5sum(newEpgData)

        if md5sum is None:
            msg = "Failed to get md5sum for downloaded data."
            logging.error(msg)
            msgs.append(msg)
            epgMd5Component.failed(msg)
            errors += 1
            return msgs, errors
        else:
            msg = "md5sum: " + md5sum
            logging.info(msg)
            msgs.append(msg)
            epgMd5Component.completed(msg)


        epgWriterComponent = informer.get(epgWriter)
        epgWriterComponent.started()
        path = self.saveNewEpgData(newEpgData, filepath)

        if path is None:
            msg = "Something unexpected happened while deciding whether or not to keep the new file."
            logging.error(msg)
            msgs.append(msg)
            epgWriterComponent.failed(msg)
            errors += 1
            return msgs, errors
        elif path is False:
            if epgTooOld:
                msg = "EPG haven't been updated in " + str(ageOfLatestEpgFile)
                logging.error(msg)
                msgs.append(msg)
                errors += 1
                epgWriterComponent.failed(msg)
                return msgs, errors
            else:
                msg = "Unchanged EPG data, didn't save."
                logging.info(msg)
                msgs.append(msg)
                epgWriterComponent.completed(msg)
                return msgs, errors
        else:
            msg = "Saved EPG data to file: " + path
            logging.info(msg)
            msgs.append(msg)
            epgWriterComponent.completed(msg)


        epgXmlComponent = informer.get(epgXml)
        epgXmlComponent.started()
        validXml = self.validXmlFile(path)

        if not validXml:
            msg = "Invalid XML."
            logging.error(msg)
            msgs.append(msg)
            epgXmlComponent.failed(msg)
            errors += 1
        else:
            msg = "Valid XML."
            logging.info(msg)
            msgs.append(msg)
            epgXmlComponent.completed(msg)

        return msgs, errors


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print "Usage: %s config-file" % sys.argv[0]
        sys.exit(1)
    else:
        configFile = sys.argv[1]

    try:
        config = EpgConfig(configFile)
    except Exception as e:
        print "Error loading the config file: " + configFile
        print e
    else:
        logging.basicConfig(filename=config.logFile,level=logging.INFO, format='%(asctime)s: %(message)s')
        filename = createFilename()
        filepath = config.dataDir + "/" + filename
        informer = StateInformer(filename, config.stateMonitor)
        epgComponent_ = informer.get(epgComponent)
        try:
            downloader = YouseeEpgDownloader(config, filename, filepath, informer)
            logging.info("Created new %s for \"%s\", using \"%s\" as state monitor." % (downloader.__class__.__name__, filename, config.stateMonitor))
            epgComponent_.started()
            (messages, errors) = downloader.run()
        except Exception as e:
            epgComponent_.failed(e.message)
            logging.info("Failed: %s" % downloader.__class__.__name__)
            print e
            logging.info("Created new %s for \"%s\", using \"%s\" as state monitor." % (downloader.__class__.__name__, filename, config.stateMonitor))
        else:
            epgComponent_.done()
            logging.info("Done: %s" % downloader.__class__.__name__)

            logging.shutdown()
            if errors > 0:
                sys.exit(2)
